/**
 * Componente Curricular: Módulo Integrado de Concorrência e Conectividade
 * Autor: Estéfane Carmo de Souza
 * Data: 13/09/2021
 *
 * Declaro que este código foi elaborado por mim de forma individual e
 * não contém nenhum trecho de código de outro colega ou de outro autor,
 * tais como provindos de livros e apostilas, e páginas ou documentos
 * eletrônicos da Internet. Qualquer trecho de código de outra autoria que
 * uma citação para o  não a minha está destacado com  autor e a fonte do
 * código, e estou ciente que estes trechos não serão considerados para fins
 * de avaliação. Alguns trechos do código podem coincidir com de outros
 * colegas pois estes foram discutidos em sessões tutorias.
 */
package view;

import controler.Comunicador;
import controler.ControladorInterface;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.json.JSONException;

public class TelaInicial extends javax.swing.JFrame implements Runnable{

    private ControladorInterface controlador;
    private Comunicador comunicador;
    
    /**
     * Creates new form TelaInicial
     */
    public TelaInicial() throws IOException {
        initComponents();
        this.setLocationRelativeTo(null);
        //Obtem a unica instância do controlador da interface e do comunidador
        controlador = ControladorInterface.getInstancia();
        comunicador = Comunicador.getInstancia();
        //Cria a thread e inicializa
        Thread t = new Thread(this);
        t.start();
       
        //Importa pacientes no arquivo, caso exista
        controlador.importarPacientes();
        
        //Adiciona todos os paciente cadastrados no comboBoxPacientes
        ArrayList<String> pacientes = controlador.addPacientesComboBox();
        for (int i = 0; i <pacientes.size(); i++) {
            listaPacientes.addItem(pacientes.get(i));
        }
        
        //Atualiza a lista de pacientes graves
        this.atualizarPacientesGraves();
        
        
    }
    
    //Método que atualiza os 7 pacientes graves na tela
    public void atualizarPacientesGraves(){
       //Salva a lista de pacientes graves
       ArrayList<String> pacientesGraves = controlador.addPacientesGraves();
       //Limpa os labels
       paciente1.setText(null);
       paciente2.setText(null);
       paciente3.setText(null);
       paciente4.setText(null);
       paciente5.setText(null);
       paciente6.setText(null);
       paciente7.setText(null);
       //Se existir pacienest graves, altera cada label para o nome do paciente
       if(!pacientesGraves.isEmpty()){
          paciente1.setText(pacientesGraves.get(0));
          if(pacientesGraves.size()>=2){
          paciente2.setText(pacientesGraves.get(1));
          }
          if(pacientesGraves.size()>=3){
            paciente3.setText(pacientesGraves.get(2));
          }
          if(pacientesGraves.size()>=4){
            paciente4.setText(pacientesGraves.get(3));
          }
          if(pacientesGraves.size()>=5){
            paciente5.setText(pacientesGraves.get(4));
          }
          if(pacientesGraves.size()>=6){
            paciente6.setText(pacientesGraves.get(5));
          }
          if(pacientesGraves.size()>=7){
            paciente7.setText(pacientesGraves.get(6));
          }
       }
        else{//Se a lista for nula, exibe que não existem pacientes em estado grave
            paciente3.setText("Não há pacientes em estado grave");
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        listaPacientes = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        cadastrar = new javax.swing.JButton();
        remover = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        paciente1 = new javax.swing.JLabel();
        paciente2 = new javax.swing.JLabel();
        paciente3 = new javax.swing.JLabel();
        paciente4 = new javax.swing.JLabel();
        paciente5 = new javax.swing.JLabel();
        paciente7 = new javax.swing.JLabel();
        paciente6 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(675, 500));

        jLabel1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("SISTEMA DE MONITORAMENTO DE COVID-19");

        listaPacientes.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        listaPacientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listaPacientesActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setText("PACIENTES MAIS GRAVES");

        jButton1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton1.setText("Pesquisar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setText("SELECIONAR PACIENTE PARA MONITORAR:");

        cadastrar.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        cadastrar.setText("Aceitar Cadastros");
        cadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cadastrarActionPerformed(evt);
            }
        });

        remover.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        remover.setText("Aceitar Remoções");
        remover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        paciente1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        paciente1.setForeground(new java.awt.Color(255, 102, 0));
        paciente1.setText("PACIENTES MAIS GRAVES");

        paciente2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        paciente2.setForeground(new java.awt.Color(255, 102, 0));
        paciente2.setText("PACIENTES MAIS GRAVES");

        paciente3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        paciente3.setForeground(new java.awt.Color(255, 102, 0));
        paciente3.setText("PACIENTES MAIS GRAVES");

        paciente4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        paciente4.setForeground(new java.awt.Color(255, 102, 0));
        paciente4.setText("PACIENTES MAIS GRAVES");

        paciente5.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        paciente5.setForeground(new java.awt.Color(255, 102, 0));
        paciente5.setText("PACIENTES MAIS GRAVES");

        paciente7.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        paciente7.setForeground(new java.awt.Color(255, 102, 0));
        paciente7.setText("PACIENTES MAIS GRAVES");

        paciente6.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        paciente6.setForeground(new java.awt.Color(255, 102, 0));
        paciente6.setText("PACIENTES MAIS GRAVES");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(paciente1, javax.swing.GroupLayout.DEFAULT_SIZE, 520, Short.MAX_VALUE)
                    .addComponent(paciente7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(paciente6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(paciente5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(paciente4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(paciente3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(paciente2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(paciente1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(paciente2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(paciente3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(paciente4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(paciente5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(paciente6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(paciente7)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        paciente1.getAccessibleContext().setAccessibleName("..");
        paciente2.getAccessibleContext().setAccessibleName("..");
        paciente3.getAccessibleContext().setAccessibleName("..");
        paciente4.getAccessibleContext().setAccessibleName("..");
        paciente5.getAccessibleContext().setAccessibleName("..");
        paciente7.getAccessibleContext().setAccessibleName("..");
        paciente6.getAccessibleContext().setAccessibleName("..");

        jLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel4.setText("ACEITAR SOLICITAÇÕES DE CADASTRO E REMOÇÃO:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 544, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(listaPacientes, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(cadastrar, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(72, 72, 72)
                        .addComponent(remover, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 472, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(67, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(listaPacientes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cadastrar)
                    .addComponent(remover))
                .addGap(33, 33, 33))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    //Botao para remocao de paciente
    private void removerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removerActionPerformed
        try {
            String retorno = comunicador.getDados("GET/removerPaciente");//Faz a requisao para obter os pacientes removidos
            if(!retorno.equals("nula")){
                //Atualiza o comboBox com a lista de pacientes, para as novas opções de pacientes
                listaPacientes.removeAllItems();
                ArrayList<String> pacientes = controlador.addPacientesComboBox();
                for (int i = 0; i <pacientes.size(); i++) {
                    listaPacientes.addItem(pacientes.get(i));
                }
                //Atualiza os pacientes em estado grave
                this.atualizarPacientesGraves();
              //  JOptionPane.showMessageDialog(null, "O paciente foi removido");
                
            }

        } catch (IOException ex) {
            Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
        } catch (JSONException ex) {
            Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_removerActionPerformed
    
    //Botão para cadastramento de pacientes
    private void cadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cadastrarActionPerformed
        try {
            String retorno=comunicador.getDados("GET/cadastrarPaciente");
            //Atualiza o combo Box para as novas opções de pacientes
            if(!retorno.equals("nula")){
                listaPacientes.removeAllItems();
                ArrayList<String> pacientes = controlador.addPacientesComboBox();
                for (int i = 0; i <pacientes.size(); i++) {
                    listaPacientes.addItem(pacientes.get(i));
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
        } catch (JSONException ex) {
            Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_cadastrarActionPerformed
    
    //botão para acessar a tela de monitoramento de um determinado paciente
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String nome = String.valueOf(listaPacientes.getSelectedItem());
        new MonitoramentoPaciente(nome).setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void listaPacientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaPacientesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_listaPacientesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
         try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
       java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new TelaInicial().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
                }
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cadastrar;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> listaPacientes;
    private javax.swing.JLabel paciente1;
    private javax.swing.JLabel paciente2;
    private javax.swing.JLabel paciente3;
    private javax.swing.JLabel paciente4;
    private javax.swing.JLabel paciente5;
    private javax.swing.JLabel paciente6;
    private javax.swing.JLabel paciente7;
    private javax.swing.JButton remover;
    // End of variables declaration//GEN-END:variables

    //Método para atualizacao da lista de pacientes graves a cada 10 segundos
    @Override
    public void run() {
        int delay = 7000;   // delay de 7 seg.
        int intervalo =3000;  // intervalo de 3 seg.
        Timer timer = new Timer();
   
        timer.scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
               atualizarPacientesGraves(); //atualiza a lista de pacientes graves
           }
       }, delay, intervalo);
    }
}